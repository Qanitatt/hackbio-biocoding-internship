import random
import math

def logistic_population_growth(P0, K, r, T, lag_range, exp_range):
    """Simulates logistic population growth with random lag and exponential phases."""
    
    # Randomizing lag and exponential phase duration within user-defined ranges
    lag = random.randint(lag_range[0], lag_range[1])
    exp_phase = random.randint(exp_range[0], exp_range[1])
    
    population_over_time = []  # Store population values
    
    for t in range(T + 1):  # Loop over each time step
        if t < lag:
            P = P0  # No growth during lag phase
        elif t < lag + exp_phase:
            P = P0 + r * P0 * (1 - P0 / K)  # Exponential growth
        else:
            P = K / (1 + ((K - P0) / P0) * math.exp(-r * (t - lag - exp_phase)))  # Logistic equation
        
        population_over_time.append((t, round(P, 2)))  # Store time and population (rounded to 2 decimal places)
    
    # Neatly organized output
    print("\nTime\tPopulation")
    print("-" * 20)
    for time, pop in population_over_time:
        print(f"{time}\t{pop}")

# Get user input for parameters
P0 = int(input("Enter initial population (P0): "))
K = int(input("Enter carrying capacity (K): "))
r = float(input("Enter growth rate (r): "))
T = int(input("Enter total time steps (T): "))

# Get user input for lag phase range
lag_min = int(input("Enter minimum lag phase duration: "))
lag_max = int(input("Enter maximum lag phase duration: "))
lag_range = (lag_min, lag_max)  # User-defined range

# Get user input for exponential phase range
exp_min = int(input("Enter minimum exponential phase duration: "))
exp_max = int(input("Enter maximum exponential phase duration: "))
exp_range = (exp_min, exp_max)  # User-defined range

# Run the simulation with user-defined values
logistic_population_growth(P0, K, r, T, lag_range, exp_range)
